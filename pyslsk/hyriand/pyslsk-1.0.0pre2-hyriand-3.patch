diff -ru3 pyslsk-1.0.0pre2/pysoulseek/config.py slsk-tmp/pysoulseek/config.py
--- pyslsk-1.0.0pre2/pysoulseek/config.py	2003-02-20 22:56:47.000000000 +0100
+++ slsk-tmp/pysoulseek/config.py	2003-02-24 00:10:02.000000000 +0100
@@ -27,9 +27,10 @@
 	self.parser = ConfigParser.ConfigParser()
 	self.parser.read([self.filename])
         self.sections = {"server":{"server":None,"login":None,"passw":None, \
-	"enc":"utf-8","userlist":[],"autojoin":["pyslsk"]}, \
+	"enc":"utf-8","userlist":[],"banlist":[],"autojoin":["pyslsk"]}, \
 	"transfers":{"downloaddir":None,"sharedownloaddir":1,"shared":None, \
-	"uploadbandwidth":100,"downloads":[],"sharedfiles":{}, \
+	"uploadbandwidth":100,"uselimit":0,"uploadlimit":100,"limitby":1,
+	"downloads":[],"sharedfiles":{}, \
 	"sharedfilesstreams":{},"sharedindex":{}},"userinfo":{"descr":"''", \
 	"pic":""},"logging":{"privatechat":0,"chatrooms":0},"searches":{"maxresults":50}}
 	try:
@@ -51,7 +52,7 @@
 	for i in self.parser.sections():
 	    for j in self.parser.options(i):
 		val = self.parser.get(i,j, raw = 1)
-		if j in ['server','shared','uploadbandwidth','downloads','sharedfiles','sharedownloaddir','userlist','autojoin','sharedfilesstreams','privatechat','chatrooms','maxresults']:
+		if j in ['server','shared','uploadbandwidth','uselimit','uploadlimit','limitby','downloads','sharedfiles','sharedownloaddir','userlist','banlist','autojoin','sharedfilesstreams','privatechat','chatrooms','maxresults']:
 		    try:
 		        self.sections[i][j] = eval(val)
 		    except:
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/pysoulseek.py slsk-tmp/pysoulseek/pysoulseek.py
--- pyslsk-1.0.0pre2/pysoulseek/pysoulseek.py	2003-02-23 02:08:22.000000000 +0100
+++ slsk-tmp/pysoulseek/pysoulseek.py	2003-02-23 15:06:17.000000000 +0100
@@ -54,6 +54,11 @@
 
         self.queue = Queue.Queue(0)
         self.protothread = slskproto.SlskProtoThread(callback,self.queue)
+	uselimit = self.config.sections["transfers"]["uselimit"]
+	uploadlimit = self.config.sections["transfers"]["uploadlimit"]
+	limitby = self.config.sections["transfers"]["limitby"]
+	self.queue.put(slskmessages.SetUploadLimit(uselimit,uploadlimit,limitby))
+
         self.serverconn = None
         self.waitport = None
         self.peerconns = []
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/slskmessages.py slsk-tmp/pysoulseek/slskmessages.py
--- pyslsk-1.0.0pre2/pysoulseek/slskmessages.py	2003-02-23 02:13:46.000000000 +0100
+++ slsk-tmp/pysoulseek/slskmessages.py	2003-02-23 17:08:53.000000000 +0100
@@ -79,6 +79,7 @@
 	self.file = file
 	self.size = size
 	self.sentbytes = sentbytes
+	self.sentbytes2 = 0
 	self.offset = offset
 
 class FileError(InternalMessage):
@@ -964,3 +965,9 @@
 	len, self.user = self.getObject(message, types.StringType,len)
 	len, self.searchid = self.getObject(message, types.IntType,len)
 	len, self.searchterm = self.getObject(message, types.StringType,len)
+
+class SetUploadLimit(InternalMessage):
+    def __init__(self,uselimit,limit,limitby):
+	self.uselimit = uselimit
+	self.limit = limit
+	self.limitby = limitby
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/slskproto.py slsk-tmp/pysoulseek/slskproto.py
--- pyslsk-1.0.0pre2/pysoulseek/slskproto.py	2003-02-22 05:36:46.000000000 +0100
+++ slsk-tmp/pysoulseek/slskproto.py	2003-02-23 18:58:54.000000000 +0100
@@ -103,6 +103,7 @@
 	self._p.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
 	self._conns = {}
 	self._connsinprogress={}
+	self._uploadlimit = (self._calcLimitNone, 0)
 
 	for listenport in range(2234,2240):
 		try:
@@ -116,6 +117,40 @@
 	if listenport is not None:
 	    self.start()
     
+    def _isUpload(self, conn):
+        return conn.__class__ is PeerConnection and conn.fileupl is not None
+
+    def _calcUploadSpeed(self, i):
+        curtime = time.time()
+        if not hasattr(i, "starttime"):
+            i.starttime = curtime
+        elapsed = curtime - i.starttime
+        if elapsed == 0:
+            return 0
+        else:
+           return i.fileupl.sentbytes2 / elapsed
+
+    def _calcLimitByTransfer(self, conns, i):
+        max = self._uploadlimit[1] * 1024.0
+        limit = max - self._calcUploadSpeed(i) + 1024
+        if limit < 1024.0:
+            return 0
+        return long(limit)
+
+    def _calcLimitByTotal(self, conns, i):
+        max = self._uploadlimit[1] * 1024.0
+        bw = 0.0
+        for j in conns.values():
+            if self._isUpload(j):
+                bw = bw + self._calcUploadSpeed(j)
+        limit = max - bw + 1024
+        if limit < 1024.0:
+            return 0
+        return long(limit)
+
+    def _calcLimitNone(self, conns, i):
+        return None
+
     def run(self):
 	""" Actual networking loop is here."""
 	p = self._p
@@ -128,7 +163,17 @@
         while not self._want_abort:
             if not queue.empty():
 		conns, connsinprogress, s = self.process_queue(queue, conns, connsinprogress,s)
-	    outsock = [i for i in conns.keys() if len(conns[i].obuf) > 0 or (i is not s and conns[i].fileupl is not None)]
+	    outsocks = [i for i in conns.keys() if len(conns[i].obuf) > 0 or (i is not s and conns[i].fileupl is not None)]
+	    outsock = []
+	    self._limits = {}
+	    for i in outsocks:
+	        if self._isUpload(conns[i]):
+	            limit = self._uploadlimit[0](conns, conns[i])
+	            if limit is None or limit > 0:
+	                self._limits[i] = limit
+	                outsock.append(i)
+	        else:
+	            outsock.append(i)
 #	    print outsock
 	    try:
             	input,output,exc = select.select(conns.keys()+connsinprogress.keys()+[p],connsinprogress.keys()+outsock,[],0.5)
@@ -203,14 +248,23 @@
 
 
     def writeData(self, s, conns, i):
+        if self._limits.has_key(i):
+            limit = self._limits[i]
+        else:
+            limit = None
+
 	conns[i].lastactive = time.time()
 	i.setblocking(0)
-	bytes_send = i.send(conns[i].obuf)
+	if limit is None:
+	    bytes_send = i.send(conns[i].obuf)
+	else:
+	    bytes_send = i.send(conns[i].obuf[:limit])
 	i.setblocking(1)
 	conns[i].obuf = conns[i].obuf[bytes_send:]
 	if i is not s:
 	    if conns[i].fileupl is not None and conns[i].fileupl.offset is not None:
 	        conns[i].fileupl.sentbytes = conns[i].fileupl.sentbytes + bytes_send
+	        conns[i].fileupl.sentbytes2 = conns[i].fileupl.sentbytes2 + bytes_send
 		try:
 		    if conns[i].fileupl.offset + conns[i].fileupl.sentbytes + len(conns[i].obuf) < conns[i].fileupl.size:
 			bytestoread = bytes_send*2-len(conns[i].obuf)+10*1024
@@ -368,6 +422,13 @@
         conn.ibuf = buffer
         return msgs,conn
 
+    def _resetCounters(self, conns):
+	curtime = time.time()
+	for i in conns.values():
+	    if hasattr(i, "starttime"):
+	        i.starttime = curtime
+		i.fileupl.sentbytes2 = 0
+
     def process_queue(self,queue, conns, connsinprogress, s):
 	""" Processes messages sent by UI thread. s is a server connection 
 	socket object, queue holds the messages, conns ans connsinprogess 
@@ -441,6 +502,17 @@
 		    self._ui_callback([DownloadFile(msgObj.conn,0,msgObj.file)])
 		elif msgObj.__class__ is UploadFile and msgObj.conn in conns.keys():
 		    conns[msgObj.conn].fileupl = msgObj
+		    self._resetCounters(conns)
+		elif msgObj.__class__ is SetUploadLimit:
+		    if msgObj.uselimit:
+		        if msgObj.limitby:
+		            cb = self._calcLimitByTotal
+		        else:
+		            cb = self._calcLimitByTransfer
+		    else:
+		        cb = self._calcLimitNone
+		    self._resetCounters(conns)
+		    self._uploadlimit = (cb, msgObj.limit)
 	if needsleep:
 	    time.sleep(1)
 	    
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/transfers.py slsk-tmp/pysoulseek/transfers.py
--- pyslsk-1.0.0pre2/pysoulseek/transfers.py	2003-02-23 00:51:37.000000000 +0100
+++ slsk-tmp/pysoulseek/transfers.py	2003-02-24 00:32:31.000000000 +0100
@@ -232,7 +232,9 @@
 		response = slskmessages.TransferResponse(conn,0,reason = "Cancelled", req = msg.req)
 		self.eventprocessor.logMessage("Denied file request: "+str(vars(msg)),1)
 	else:
-	    if not self.fileIsShared(msg.file):
+	    if user in self.eventprocessor.config.sections["server"]["banlist"]:
+	        response = slskmessages.TransferResponse(conn,0,reason = "Banned",req=msg.req)
+	    elif not self.fileIsShared(msg.file):
 		response = slskmessages.TransferResponse(conn,0,reason = "File not shared", req = msg.req)
 	    elif self.userTransfers(user) or self.bandwidthLimitReached() or self.transferNegotiating():
 		response = slskmessages.TransferResponse(conn,0,reason = "Queued", req = msg.req)
@@ -527,6 +529,13 @@
 		if needupdate:
                     self.uploadspanel.update(i)
 
+    def abortUserUploads(self, user):
+    	list = [i for i in self.uploads if i.user == user]
+        for upload in list:
+            self.AbortTransfer(upload)
+        if self.uploadspanel is not None:
+	    self.uploadspanel.ClearByUser(user)
+
     def checkUploadQueue(self):
 	if self.bandwidthLimitReached() or self.transferNegotiating():
 	    return
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/wxgui/about.py slsk-tmp/pysoulseek/wxgui/about.py
--- pyslsk-1.0.0pre2/pysoulseek/wxgui/about.py	2003-02-23 02:18:42.000000000 +0100
+++ slsk-tmp/pysoulseek/wxgui/about.py	2003-02-24 01:24:01.000000000 +0100
@@ -31,3 +31,56 @@
         self.SetAutoLayout(true)
         mainsizer.Fit(self)
 
+class AboutCommands(wxDialog):
+    def __init__(self, parent, id, title, private = false):
+
+        wxDialog.__init__(self,parent,id,title)
+
+	sizer = wxStaticBoxSizer(wxStaticBox(self,-1,""),wxVERTICAL)
+
+	mainsizer = wxBoxSizer(wxVERTICAL)
+
+        ok = wxButton(self, wxID_OK, "OK")
+        ok.SetDefault()
+
+	if private:
+	    pvs = "private chat sessions"
+	else:
+	    pvs = "chat rooms"
+	sizer.Add(wxStaticText(self, -1, "Commands available in %s:"%pvs), flag=wxALL|wxALIGN_CENTER, border=5)
+	if not private:
+            help = """/join /j channel - Join channel "channel"
+/leave /l [channel] - Leave channel "channel" (or current if omitted)
+/part /p [channel] - See /leave
+
+/add /ad user - Add user "user" to your user list
+/browse /b user - Browse user "user"'s files
+/whois /w user - Request user info for user "user"
+
+/msg user message - Send "message" to user "user"
+/pm user - Open a private chat window to user "user"
+
+/away /a - Toggles your away status
+/quit /q - Quit PySoulSeek
+"""
+	else:
+            help = """/close - Close the current private chat
+
+/add /ad [user] - Add user "user" to your user list
+/browse /b [user] - Browse user "user"'s files
+/whois /w [user] - Request user info for user "user"
+
+
+/away /a - Toggles your away status
+/quit /q - Quit PySoulSeek
+
+In private chats, the user argument is optional. If
+it is omitted, PySoulSeek will use the user that you're
+talking to.
+"""
+	sizer.Add(wxStaticText(self,-1, help), flag = wxALL, border = 5)
+	mainsizer.Add(sizer, flag=wxALL,border = 5)
+	mainsizer.Add(ok, flag = wxALL|wxALIGN_CENTER,border = 10)
+        self.SetSizer(mainsizer)
+        self.SetAutoLayout(true)
+        mainsizer.Fit(self)
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/wxgui/chat.py slsk-tmp/pysoulseek/wxgui/chat.py
--- pyslsk-1.0.0pre2/pysoulseek/wxgui/chat.py	2003-02-23 02:16:39.000000000 +0100
+++ slsk-tmp/pysoulseek/wxgui/chat.py	2003-02-24 00:22:41.000000000 +0100
@@ -328,6 +328,9 @@
         addtolistID=wxNewId()
         self.menu.Append(addtolistID, 'Add to User List')
         EVT_MENU(self,addtolistID, self.OnAddToList)
+        banuserID=wxNewId()
+	self.menu.Append(banuserID, "Ban this user")
+	EVT_MENU(self,banuserID, self.OnBanUser)
 
 
         EVT_RIGHT_UP(self,self.OnRightUp)
@@ -357,6 +360,9 @@
     def OnAddToList(self, event):
 	self.parent.frame.AddToList(self.focuseduser)
 
+    def OnBanUser(self, event):
+    	self.parent.frame.BanUser(self.focuseduser)
+
 
     def OnGetItemText(self, item, col):
         username =  self.parent.userslist[item]
@@ -425,7 +431,8 @@
 
         chatpanel = wxPanel(splitter,-1)
         self.chat = OutputWindow(chatpanel,-1,style = wxTE_MULTILINE|wxTE_READONLY|wxTE_RICH)
-        self.mychatphrase = wxTextCtrl(chatpanel,-1, style = wxTE_PROCESS_ENTER)
+        self.mychatphrase = wxTextCtrl(chatpanel,-1, style = wxTE_PROCESS_ENTER|wxTE_PROCESS_TAB)
+	EVT_CHAR(self.mychatphrase, self.OnPhraseChar)
 
         chatsizer = wxBoxSizer(wxVERTICAL)
         chatsizer.Add(self.chat,1,wxEXPAND)
@@ -460,10 +467,80 @@
     def OnEnter(self, event):
         """ Processes chat phrase that we entered. """
         text = self.mychatphrase.GetLineText(0)
-	if len(text) > 0:
+	if len(text) == 0:
+	  return
+	s = text.split(" ", 1)
+	cmd = s[0]
+	if len(s) > 1:
+	    rest = s[1]
+	else:
+	    rest = ""
+	if cmd in ("/join", "/j"):
+	    if rest:
+	        self.queue.put(slskmessages.JoinRoom(rest))
+	elif cmd in ("/leave", "/part", "/l", "/p"):
+	    if rest:
+		self.queue.put(slskmessages.LeaveRoom(rest))
+	    else:
+		self.OnLeave(event)
+	elif cmd == "/pm":
+            if rest:
+                self.privatechat.SendMessage(text[4:])
+	elif cmd in ("/msg", "/m"):
+            if rest:
+	        if rest[0] == "'" or rest[0] == '"':
+		    quote = rest[0] + " "
+		    rest = rest[1:]
+	        else:
+		    quote = " "
+	        nick = msg = ""
+	        while len(rest):
+		    if quote and rest[:len(quote)] == quote:
+		        rest = rest[len(quote)-1:]
+		        quote = ""
+		    elif quote:
+		        nick = nick + rest[0]
+		    else:
+		        msg = msg + rest[0]
+		    rest = rest[1:]
+	        self.privatechat.SendMessage(nick, msg)
+	elif cmd in ("/away", "/a"):
+	    self.frame.OnAway(event)
+	elif cmd in ("/quit", "/q"):
+	    self.frame.Close()
+	    return
+	elif cmd in ("/add", "/ad"):
+	    if rest:
+	        self.frame.AddToList(rest)
+	elif cmd in ("/whois", "/w"):
+            if rest:
+                self.frame.np.ProcessRequestToPeer(rest, slskmessages.UserInfoRequest(None), self.frame.np.userinfo)
+	elif cmd in ("/browse", "/b"):
+	    if rest:
+                self.frame.np.ProcessRequestToPeer(rest, slskmessages.GetSharedFileList(None), self.frame.np.userbrowse)
+	else:
             self.queue.put(slskmessages.SayChatroom(self.room, self.frame.np.encode(text)))
         self.mychatphrase.Clear()
 
+    def OnPhraseChar(self, event):
+	if event.GetKeyCode() == WXK_TAB and not event.ControlDown() and not event.ShiftDown() and not event.AltDown():
+	    ip = self.mychatphrase.GetInsertionPoint()
+            part = self.mychatphrase.GetLineText(0)[:ip].split(" ")[-1]
+	    m = [i for i in self.users.keys() if i[:len(part)] == part and len(i) > len(part)]
+	    if len(m) == 0:
+		return
+	    elif len(m) == 1:
+		a = m[0]
+	    else:
+                c, a = len(m[0]), m[0]
+		for i in m:
+		    while i[:c] != a[:c] and c > 0:
+		        c = c - 1
+		    a = a[:c]
+	    self.mychatphrase.WriteText(a[len(part):])
+	else:
+	    event.Skip()
+
     def OnLeave(self, event):
 	if self.room is not None:
 	    self.queue.put(slskmessages.LeaveRoom(self.room))
@@ -593,7 +670,7 @@
         if self.users[msg.user].logctrl.GetValue():
             self.users[msg.user].logfile.write(self.np.decode(str))
 
-    def SendMessage(self, user):
+    def SendMessage(self, user, message = None):
         """ Adds a notebook tab with a user's name on it, and private chat 
         window inside the tab
         """
@@ -601,6 +678,8 @@
             self.users[user] = PrivateChatWindow(self, -1, user)
             self.AddPage(self.users[user],user)
 	    self.np.queue.put(slskmessages.GetUserStatus(user))
+	if message:
+	    self.users[user].SendMessage(message)
 
     def GetUserStatus(self, msg):
 	if self.users.has_key(msg.user):
@@ -671,9 +750,7 @@
 	if parent.GetPageCount() > 0:
 	    parent.SetSelection(0)
 
-    def OnEnter(self, event):
-        """ Sends our chat phrase and updates the window."""
-        text = self.parent.np.encode(self.mychatphrase.GetLineText(0))
+    def SendMessage(self, text):
 	username = self.parent.np.config.sections["server"]["login"]
         timestamp = self.parent.np.encode(time.strftime("%c",time.localtime()))
         if text[:4] == "/me ":
@@ -686,10 +763,38 @@
 	if len(text) > 0:
 	    self.AddText(self.parent.np.decode(str, wxUSE_UNICODE), color)
             self.parent.queue.put(slskmessages.MessageUser(self.user, text))
-            self.mychatphrase.Clear()
             if self.logctrl.GetValue():
                 self.logfile.write(self.parent.np.decode(str))
 
+    def OnEnter(self, event):
+        """ Sends our chat phrase and updates the window."""
+        text = self.mychatphrase.GetLineText(0)
+	s = text.split(" ", 1)
+	cmd = s[0]
+	if len(s) > 1:
+	    rest = s[1]
+	else:
+	    rest = ""
+	if not rest:
+	    rest = self.user
+	if cmd in ("/away", "/a"):
+	    self.parent.np.frame.OnAway(event)
+	elif cmd in ("/quit", "/q"):
+	    self.parent.np.frame.Close()
+	    return
+	elif cmd in ("/close", "/c"):
+	    self.OnClose(event)
+	    return
+	elif cmd in ("/add", "/ad"):
+	    self.parent.np.frame.AddToList(rest)
+	elif cmd in ("/whois", "/w"):
+            self.parent.np.ProcessRequestToPeer(rest, slskmessages.UserInfoRequest(None), self.parent.np.userinfo)
+	elif cmd in ("/browse", "/b"):
+            self.parent.np.ProcessRequestToPeer(rest, slskmessages.GetSharedFileList(None), self.parent.np.userbrowse)
+	else:
+            self.SendMessage(text)
+        self.mychatphrase.Clear()
+
     def OnLogCheckClick(self, event):
         """ This is called when the 'Log' checkbox is clicked """
         if self.logctrl.GetValue() == 1:
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/wxgui/configwindow.py slsk-tmp/pysoulseek/wxgui/configwindow.py
--- pyslsk-1.0.0pre2/pysoulseek/wxgui/configwindow.py	2003-02-20 23:06:45.000000000 +0100
+++ slsk-tmp/pysoulseek/wxgui/configwindow.py	2003-02-24 00:08:11.000000000 +0100
@@ -66,6 +66,57 @@
 	else:
 	    return self.serverlistctrl.list[item][1]
 
+class UserList(wxPanel):
+    def __init__(self, parent, id, size, label):
+	wxPanel.__init__(self, parent, id, size=size)
+	self.label = wxStaticText(self, -1, label)
+	self.listbox = wxListBox(self, -1, style=wxLB_EXTENDED)
+	self.removeButton = wxButton(self, -1, "Remove")
+	self.addButton = wxButton(self, -1, "Add...")
+	self.clearButton = wxButton(self, -1, "Clear")
+
+	EVT_BUTTON(self, self.clearButton.GetId(), self.OnClear)
+	EVT_BUTTON(self, self.removeButton.GetId(), self.OnRemove)
+	EVT_BUTTON(self, self.addButton.GetId(), self.OnAdd)
+
+	sizer = wxBoxSizer(wxVERTICAL)
+	sizer.Add(self.label)
+	sizer.Add(self.listbox, 1, flag=wxEXPAND)
+	sizer.Add(self.removeButton, flag=wxEXPAND)
+	sizer.Add(self.clearButton, flag=wxEXPAND)
+	sizer.Add(self.addButton, flag=wxEXPAND|wxTOP, border=10)
+	self.SetSizer(sizer)
+	self.SetAutoLayout(true)
+	sizer.Fit(self)
+	
+    def OnClear(self,event):
+        self._list = []
+        self.listbox.Set(self._list)
+
+    def OnRemove(self,event):
+        sel = self.listbox.GetSelections()
+        list = self._list[:]
+        for item in sel:
+            self._list.remove(list[item])
+        self.listbox.Set(self._list)
+
+    def OnAdd(self,event):
+	dlg = wxTextEntryDialog(NULL, "Username:", caption = "Add user to list")
+	if (dlg.ShowModal() == wxID_OK):
+	    user = dlg.GetValue()
+	    if user and not user in self._list:
+		self._list.append(user)
+		self.setList(self._list)
+	dlg.Destroy()
+
+    def getList(self):
+        return self._list
+
+    def setList(self, list):
+        self._list = list[:]
+        self._list.sort()
+        self.listbox.Set(self._list)
+
 class ConfigWindow(wxDialog):
     """
     This class defines a settings window that the main application should 
@@ -120,12 +171,17 @@
 	self.sharedownloadctrl = wxCheckBox(transferspanel, -1, "Share download directory")
 	self.uploaddiradd = wxButton(transferspanel, -1, "Add...")
 	self.uploaddirrem = wxButton(transferspanel, -1, "Remove")
-	self.uploaddirrescan = wxButton(transferspanel, -1, "Rescan")
+        self.uploaddirrescan = wxButton(transferspanel, -1, "Rescan")
+        self.useuploadlimit = wxCheckBox(transferspanel, -1, "Limit upload speed to ")
+        self.uploadlimit = wxTextCtrl(transferspanel, -1, size=wxSize(30,25))
+        self.limittransfer = wxRadioButton(transferspanel, -1, "per transfer", style=wxRB_GROUP)
+        self.limittotal = wxRadioButton(transferspanel, -1, "total for all transfers")
 	EVT_BUTTON(self,self.downloaddirchoose.GetId(),self.OnDownloadChoose)
 	EVT_BUTTON(self,self.uploaddiradd.GetId(),self.OnUploadAdd)
 	EVT_BUTTON(self,self.uploaddirrem.GetId(),self.OnUploadRem)
         EVT_BUTTON(self,self.uploaddirrescan.GetId(),self.OnUploadRescan)
 	EVT_CHECKBOX(self,self.sharedownloadctrl.GetId(),self.OnShareDownload)
+        EVT_CHECKBOX(self,self.useuploadlimit.GetId(),self.OnUseUploadLimit)
 
 	downloadsizer = wxBoxSizer(wxHORIZONTAL)
         downloadsizer.Add(self.downloaddirctrl)
@@ -141,18 +197,27 @@
 	uploadsizer.Add(uploadbuttonssizer)
 
 	bandwidthsizer = wxBoxSizer(wxHORIZONTAL)
-	bandwidthsizer.Add(wxStaticText(transferspanel, -1, "upload speed exceeds "),flag=wxALIGN_CENTER)
-	bandwidthsizer.Add(self.uploadbandwidth)
+	bandwidthsizer.Add(self.uploadbandwidth, flag=wxLEFT, border=10)
 	bandwidthsizer.Add(wxStaticText(transferspanel, -1, " KBytes/sec"),flag=wxALIGN_CENTER)
-	
+
+        limitsizer = wxFlexGridSizer(cols=3, rows=2)
+        limitsizer.Add(self.uploadlimit, flag=wxLEFT, border = 10)
+        limitsizer.Add(wxStaticText(transferspanel, -1, " KBytes/sec "), flag=wxALIGN_CENTER)
+        limitsizer.Add(self.limittransfer)
+        limitsizer.Add(0,0)
+        limitsizer.Add(0,0)
+        limitsizer.Add(self.limittotal)
+
 	transferssizer = wxStaticBoxSizer(wxStaticBox(transferspanel,-1,"Transfers settings:"),wxVERTICAL)
 	transferssizer.Add(wxStaticText(transferspanel, -1, "Download directory:"),flag=wxTOP|wxLEFT, border = 10)
 	transferssizer.Add(downloadsizer,flag=wxLEFT|wxRIGHT, border = 10)
 	transferssizer.Add(self.sharedownloadctrl,flag=wxLEFT|wxTOP, border = 10)
 	transferssizer.Add(wxStaticText(transferspanel, -1, "Shared directories:"),flag=wxTOP|wxLEFT, border = 10)
 	transferssizer.Add(uploadsizer, flag=wxLEFT|wxRIGHT, border = 10)
-	transferssizer.Add(wxStaticText(transferspanel, -1, "Locally queue remote requests if current"),flag=wxTOP|wxLEFT, border = 10)
-	transferssizer.Add(bandwidthsizer,flag=wxBOTTOM|wxLEFT, border = 10)
+	transferssizer.Add(wxStaticText(transferspanel, -1, "Locally queue uploads if total upload speed exceeds:"),flag=wxTOP|wxLEFT, border = 10)
+	transferssizer.Add(bandwidthsizer,flag=wxLEFT|wxBOTTOM, border = 10)
+        transferssizer.Add(self.useuploadlimit, flag=wxLEFT, border = 10)
+	transferssizer.Add(limitsizer, flag=wxLEFT|wxBOTTOM, border = 10)
 
 	self.descr = wxTextCtrl(userinfopanel,-1,size=wxSize(250,100),style = wxTE_MULTILINE|wxTE_RICH)
 	self.pic = wxTextCtrl(userinfopanel,-1,size=wxSize(250, 25))
@@ -182,6 +247,8 @@
         resultssizer.Add(self.maxresults)
         resultssizer.Add(wxStaticText(miscpanel, -1, " results per search request"),flag=wxALIGN_CENTER)
 	miscsizer.Add(resultssizer,flag=wxTOP|wxLEFT, border = 10)
+	self.banlist = UserList(miscpanel, -1, wxSize(150,0), "Banned users")
+	miscsizer.Add(self.banlist, 1, flag=wxALIGN_CENTER|wxTOP|wxBOTTOM, border=15)
 
 	serverpanel.SetSizer(serversizer)
 	serverpanel.SetAutoLayout(true)
@@ -250,6 +317,12 @@
 	self.rescandirs()
 	self.needrescan = 0
 
+    def OnUseUploadLimit(self,event):
+        enabled = self.useuploadlimit.GetValue()
+        self.uploadlimit.Enable(enabled)
+        self.limittransfer.Enable(enabled)
+        self.limittotal.Enable(enabled)
+
     def rescandirs(self):
 	shared = []
         for i in range(self.uploaddirsctrl.Number()):
@@ -282,6 +355,8 @@
 	    self.passwctrl.SetValue(server["passw"])
 	if server["enc"] is not None:
 	    self.enc.SetValue(server["enc"])
+	if server["banlist"] is not None:
+	    self.banlist.setList(server["banlist"])
 	if transfers["downloaddir"] is not None:
 	    self.downloaddirctrl.SetValue(transfers["downloaddir"])
 	if transfers["shared"] is not None:
@@ -296,6 +371,13 @@
 	    self.sharedindex = transfers["sharedindex"]
 	if transfers["uploadbandwidth"] is not None:
 	    self.uploadbandwidth.SetValue(str(transfers["uploadbandwidth"]))
+	if transfers["uselimit"] is not None:
+	    self.useuploadlimit.SetValue(transfers["uselimit"])
+	if transfers["uploadlimit"] is not None:
+	    self.uploadlimit.SetValue(str(transfers["uploadlimit"]))
+	if transfers["limitby"] is not None:
+	    self.limittotal.SetValue(transfers["limitby"])
+	self.OnUseUploadLimit(None)
 	if transfers["sharedownloaddir"] is not None:
 	    self.sharedownloadctrl.SetValue(transfers["sharedownloaddir"])
 	if userinfo["descr"] is not None:
@@ -337,19 +419,29 @@
 	except:
 	    uploadbandwidth = None
 	try:
+	    uploadlimit = int(self.encode(self.uploadlimit.GetValue()))
+	except:
+	    uploadlimit = None
+	try:
 	    maxresults = int(self.encode(self.maxresults.GetValue()))
 	except:
 	    maxresults = None
-            
+	banlist = []
+	for i in self.banlist.getList():
+	    banlist.append(self.encode(i))
 	return {"server":{"server":server, \
 		"login":self.encode(self.loginctrl.GetValue()), \
 		"passw":self.encode(self.passwctrl.GetValue()), \
+		"banlist":banlist, \
 		"enc":self.encode(self.enc.GetValue())},"transfers":{\
 		"downloaddir":self.encode(self.downloaddirctrl.GetValue()), \
 		"shared":shared, "sharedfiles":self.sharedfiles, \
 		"sharedfilesstreams":self.sharedfilesstreams, \
 		"sharedindex":self.sharedindex, \
 		"uploadbandwidth":uploadbandwidth, \
+		"uselimit":self.encode(self.useuploadlimit.GetValue()), \
+		"uploadlimit":uploadlimit, \
+		"limitby":self.encode(self.limittotal.GetValue()), \
 		"sharedownloaddir":self.encode(self.sharedownloadctrl.GetValue())},"userinfo": \
 		{"descr":self.encode(self.descr.GetValue()).__repr__(), \
 		"pic":self.encode(self.pic.GetValue())},"logging":{ \
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/wxgui/frame.py slsk-tmp/pysoulseek/wxgui/frame.py
--- pyslsk-1.0.0pre2/pysoulseek/wxgui/frame.py	2003-02-17 00:48:01.000000000 +0100
+++ slsk-tmp/pysoulseek/wxgui/frame.py	2003-02-24 01:23:10.000000000 +0100
@@ -73,7 +73,9 @@
 
         EVT_CLOSE(self, self.OnCloseWindow)
         self.Centre(wxBOTH)
-        self.CreateStatusBar(1, wxST_SIZEGRIP)
+        self.CreateStatusBar(3, wxST_SIZEGRIP)
+	self.SetStatusWidths([-1, 100, 100])
+	self.updateBandwidth()
 
 	self.configwindow = ConfigWindow(self, -1, "Settings")
 
@@ -115,6 +117,13 @@
 
 	
 	helpmenu = wxMenu()
+	aboutChatID = wxNewId()
+	helpmenu.Append(aboutChatID, '&Chat room commands', 'About chat room commands')
+	EVT_MENU(self,aboutChatID, self.OnAboutChatCommands)
+	aboutPrivateID = wxNewId()
+	helpmenu.Append(aboutPrivateID, '&Private chat commands', 'About private chat commands')
+	EVT_MENU(self,aboutPrivateID, self.OnAboutPrivateCommands)
+	helpmenu.AppendSeparator()
         aboutID = wxNewId()
         helpmenu.Append(aboutID, '&About', 'About PySoulSeek')
         EVT_MENU(self, aboutID, self.OnAbout)
@@ -147,6 +156,22 @@
 	if not self.np.config.needConfig():
 	    self.OnConnect(None)
 
+    def updateBandwidth(self):
+	def _calc(l):
+	    bandwidth = 0.0
+	    for i in l:
+		if i.conn is not None and i.speed is not None:
+		    bandwidth = bandwidth + i.speed
+	    return bandwidth
+
+	if self.np.transfers is not None:
+	    down = _calc(self.np.transfers.downloads)
+	    up = _calc(self.np.transfers.uploads)
+	else:
+	    down = up = 0.0
+	self.SetStatusText("Down: %.1f KB/s" % down, 1)
+	self.SetStatusText("Up: %.1f KB/s" % up, 2)
+
     def getNotebook(self):
 	return notebook.IconNotebook(self.splitter2.panel, -1, style=wxCLIP_CHILDREN)
     
@@ -245,7 +270,11 @@
 	if val == wxID_OK:
 	    self.np.config.setConfig(self.configwindow.GetSettings())
 	    if self.np.transfers is not None:
-		self.np.sendNumSharedFoldersFiles()	    
+		self.np.sendNumSharedFoldersFiles()
+	    uselimit = self.np.config.sections["transfers"]["uselimit"]
+	    uploadlimit = self.np.config.sections["transfers"]["uploadlimit"]
+	    limitby = self.np.config.sections["transfers"]["limitby"]
+	    self.np.queue.put(slskmessages.SetUploadLimit(uselimit,uploadlimit,limitby))
 	    self.np.config.writeConfig()
 	    if not self.np.config.needConfig():
 	        if not self.mainmenu.IsEnabled(self.disconnectID):
@@ -258,6 +287,12 @@
     def OnAbout(self, event):
 	about.About(self, -1, "About PySoulSeek").ShowModal()
 
+    def OnAboutChatCommands(self, event):
+	about.AboutCommands(self, -1, "About Chat Commands").ShowModal()
+
+    def OnAboutPrivateCommands(self, event):
+	about.AboutCommands(self, -1, "About Chat Commands", true).ShowModal()
+
     def ConnectError(self,msg):
         self.mainmenu.Enable(self.connectID,1)
         self.mainmenu.Enable(self.disconnectID,0)
@@ -313,6 +348,10 @@
             self.np.queue.put(slskmessages.GetUserStatus(user))
             self.userlist.append([user,0])
 
+    def BanUser(self,user):
+    	if user not in self.np.config.sections["server"]["banlist"]:
+    	    self.np.config.sections["server"]["banlist"].append(user)
+	    self.np.transfers.abortUserUploads(user)
 
     def GetUserStatus(self,msg):
 	for i in self.userlist:
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/wxgui/transfers.py slsk-tmp/pysoulseek/wxgui/transfers.py
--- pyslsk-1.0.0pre2/pysoulseek/wxgui/transfers.py	2003-01-29 23:21:13.000000000 +0100
+++ slsk-tmp/pysoulseek/wxgui/transfers.py	2003-02-24 00:31:30.000000000 +0100
@@ -10,6 +10,7 @@
 import string
 import time
 from sortablelist import sortableListCtrl
+from types import StringType
 
 class TransfersList(sortableListCtrl):
     """ This is a list control for transfers. Gets transfer data from transfer
@@ -43,6 +44,25 @@
 	    for i in range(len(self.list), self.GetItemCount()):
 		self.DeleteItem(len(self.list))
 
+    def Humanize(self, size):
+    	if size is None:
+    	    return None
+	priv = ""
+        if type(size) is StringType and size[-13:] == " (privileged)":
+		size, priv = size[:-13], size[-13:]
+        try:
+	    s = int(size)
+	    if s > 1024*1024*1024:
+	        r = "%.2f GB" % ((float(s) / (1024.0*1024.0*1024.0)))
+	    elif s > 1024*1024:
+	        r = "%.2f MB" % ((float(s) / (1024.0*1024.0)))
+	    elif s > 1024:
+	        r = "%.2f KB" % ((float(s) / 1024.0))
+	    else:
+                r = str(size)
+	    return r + priv
+	except:
+	    return size + priv
 
     def GetColumnText(self,item,col):
 	if col == 0:
@@ -50,9 +70,9 @@
 	if col == 1:
 	    return item.user
 	if col == 2:
-	    return item.status
+	    return self.Humanize(item.status)
 	if col == 3:
-	    return item.size
+	    return self.Humanize(item.size)
 	if col == 4:
             if item.speed is not None:
 	        return "%.1f" %(item.speed)
@@ -110,6 +130,9 @@
         addtolistID=wxNewId()
         self.menu.Append(addtolistID, 'Add to User List')
         EVT_MENU(self,addtolistID, self.OnAddToList)
+	banuserID=wxNewId()
+	self.menu.Append(banuserID, "Ban this user")
+	EVT_MENU(self,banuserID, self.OnBanUser)
 
 	self.menu.AppendSeparator()
 
@@ -143,6 +166,7 @@
     def update(self, entry = None):
 	""" Call this to make the transfer panel update the data."""
 	self.listctrl.update(entry)
+	self.eventprocessor.frame.updateBandwidth()
 
     def OnRightUp(self, event):
 	""" Show the pop-up menu"""
@@ -181,6 +205,10 @@
 	user = self.list[self.item].user
 	self.eventprocessor.frame.AddToList(user)	
 
+    def OnBanUser(self,event):
+    	user = self.list[self.item].user
+    	self.eventprocessor.frame.BanUser(user)
+
     def OnAbort(self, event):
 	""" Abort all selected transfers """
 	item = -1
@@ -264,4 +292,10 @@
         self.listctrl.UnselectAll()
         self.update()
 
+    def ClearByUser(self, user):
+        for i in self.list[:]:
+            if i.user == user:
+                self.list.remove(i)
+        self.listctrl.UnselectAll()
+        self.update()
 
diff -ru3 pyslsk-1.0.0pre2/pysoulseek/wxgui/userinfobrowse.py slsk-tmp/pysoulseek/wxgui/userinfobrowse.py
--- pyslsk-1.0.0pre2/pysoulseek/wxgui/userinfobrowse.py	2003-01-30 18:37:30.000000000 +0100
+++ slsk-tmp/pysoulseek/wxgui/userinfobrowse.py	2003-02-24 00:27:00.000000000 +0100
@@ -69,6 +69,8 @@
         self.close = wxButton(self, -1, "Close")
 	self.savepic = wxButton(self, -1, "Save pic")
 	self.savepic.Enable(0)
+	self.addtolist = wxButton(self, -1, "Add to List")
+	self.browse = wxButton(self, -1, "Browse")
         self.descr = wxTextCtrl(self,-1,size=wxSize(250,100),style = wxTE_MULTILINE|wxTE_READONLY|wxTE_RICH)
         self.infobox = wxStaticBoxSizer(wxStaticBox(self, -1, "Information:"),wxVERTICAL)
         self.info = wxStaticText(self,-1,"\n\n\n")
@@ -84,9 +86,16 @@
 	sizerlowh.Add(10,20,0,wxEXPAND)
         sizerlowh.Add(self.close,0,wxEXPAND)
 
+	sizerbutts = wxBoxSizer(wxHORIZONTAL)
+	sizerbutts.Add(60,20,1,wxEXPAND)
+	sizerbutts.Add(self.addtolist, 0, wxEXPAND)
+	sizerbutts.Add(10,20,0,wxEXPAND)
+	sizerbutts.Add(self.browse, 0, wxEXPAND)
+
         sizerv = wxBoxSizer(wxVERTICAL)
         sizerv.Add(wxStaticText(self,-1, "Self-description:"))
         sizerv.Add(self.descr,1,wxEXPAND)
+	sizerv.Add(sizerbutts,0,wxEXPAND)
         sizerv.Add(self.infobox,0,wxEXPAND)
 
         sizeruph = wxBoxSizer(wxHORIZONTAL)
@@ -101,6 +110,8 @@
         self.SetAutoLayout(true)
         EVT_BUTTON(self,self.close.GetId(), self.OnClose)
 	EVT_BUTTON(self,self.savepic.GetId(), self.OnSave)
+	EVT_BUTTON(self,self.addtolist.GetId(), self.OnAddToList)
+	EVT_BUTTON(self,self.browse.GetId(), self.OnBrowse)
 
         self.user = user
         self.conn = conn
@@ -158,6 +169,11 @@
 	os.rename(name,newname)
 	self.frame.logMessage("Picture saved to " + newname)
 
+    def OnAddToList(self, event):
+	self.frame.AddToList(self.user)
+
+    def OnBrowse(self, event):
+	self.frame.np.ProcessRequestToPeer(self.user, slskmessages.GetSharedFileList(None), self.frame.np.userbrowse)
 
     def OnClose(self, event):
         """ Closes the window"""
@@ -313,6 +329,10 @@
 	self.treemenu.Append(addtolistID, 'Add to User List')
 	self.listmenu.Append(addtolistID, 'Add to User List')
 	EVT_MENU(self,addtolistID, self.OnAddToList)
+	banuserID=wxNewId()
+	self.treemenu.Append(banuserID, "Ban this user")
+	self.listmenu.Append(banuserID, "Ban this user")
+	EVT_MENU(self,banuserID, self.OnBanUser)
 
         EVT_RIGHT_UP(self.listctrl,self.OnRightUpList)
         EVT_RIGHT_UP(self.tree, self.OnRightUpTree)
@@ -344,6 +364,9 @@
     def OnAddToList(self, event):
 	self.frame.AddToList(self.user)
 
+    def OnBanUser(self, event):
+    	self.frame.BanUser(self.user)
+
     def ShowInfo(self,msg):
         """ We got the filelist, now set up the directory tree and sort it."""
         self.conn = None
